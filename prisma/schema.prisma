generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) @map("id_user") /// Id da tabela  
  name      String   @map("nm_user") @db.VarChar(50) /// Nome do usuário
  login     String   @unique @map("nm_login") @db.VarChar(30) /// Login do usuário
  password  String   @map("vl_password") /// Senha do usuário
  createdAt DateTime @default(now()) @map("dt_created") /// Data de criação do usuário 
  updatedAt DateTime @updatedAt @map("dt_updated") /// Data de atualização do usuário 

  posts    Post[]
  comments Comment[]
  likes    Like[]

  @@map("user")
}

model Post {
  id        Int      @id @default(autoincrement()) @map("id_post") /// Id da Tabela
  authorId  Int      @map("id_author") /// Foreign key Id do usuario
  title     String   @unique @map("ds_title") @db.VarChar(50) /// Titulo de cada postagem
  content   String   @map("ds_content") @db.VarChar(200) /// Conteudo de cada postagem  
  createdAt DateTime @default(now()) @map("dt_created") /// Data de criação da postagem
  updatedAt DateTime @updatedAt @map("dt_updated") /// Data de edição da postagem 

  user     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  postTags PostTag[]
  likes    Like[]

  @@map("post")
}

model Comment {
  id              Int      @id @default(autoincrement()) @map("id_comment") /// Id do comentario
  authorId        Int      @map("id_author") /// Foreign key Id do usuario 
  postId          Int?     @map("id_post") /// Foreign key Id da postagem 
  parentCommentId Int?     @map("id_parent_comment") /// Foreign key Id da resposta 
  content         String   @map("ds_comment") @db.VarChar(100) /// Conteudo de cada postagem  
  createdAt       DateTime @default(now()) @map("dt_created") /// Data de criação da postagem
  updatedAt       DateTime @updatedAt @map("dt_updated") /// Data de edição da postagem

  user     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post     Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment?  @relation("parent_comment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  comments Comment[] @relation("parent_comment")

  @@map("comment")
}

model Tag {
  id       Int       @id @default(autoincrement()) @map("id_tag")
  name     String    @map("nm_tag") @db.VarChar(100)
  postTags PostTag[]

  @@map("tag")
}

model PostTag {
  id     Int @id @default(autoincrement()) @map("id_post_tag")
  postId Int @map("id_post")
  tagId  Int @map("id_tag")

  post Post @relation(fields: [postId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
  @@map("post_tag")
}

model Like {
  id        Int      @id @default(autoincrement()) @map("id_like")
  userId    Int      @map("id_user")
  postId    Int      @map("id_post")
  createdAt DateTime @default(now()) @map("dt_created") /// Data de criação da postagem

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
  @@map("like")
}
